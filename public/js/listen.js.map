{"version":3,"file":"/js/listen.js","mappings":"0ZACA,qkPADqBA,EAAY,WAmE7B,WAAYC,IAlEhB,4FAkEyB,yBA5DZ,MAAI,oBAOD,GAAK,wBAOA,IAAE,kBAOR,GAAC,iCAOc,SAAO,iBAOvB,CACNC,eAAgB,GAChBC,IAAK,CACDC,MAAO,GACPC,KAAM,GACNC,KAAM,GACNC,QAAS,MAEhB,wBAOe,GAWZC,SAASC,UAAUR,GACnBS,KAAKC,OAASH,SAASI,aAC3B,CArEJ,UAiMI,EA1BA,EAlBA,EAqDC,OA1ML,EAwEI,EAxEJ,EAwEI,yBAGA,WAAa,WACT,IAAIF,KAAKG,cAAT,CAGAH,KAAKG,eAAgB,EAErB,IAAIC,EAAeJ,KAAKC,OAAOI,OAAOC,eAAeC,MAErDH,EAAaI,iBAAiB,QAAQ,SAACC,GACnC,EAAKC,SAAWN,EAAaO,WACjC,IACAP,EAAaI,iBAAiB,cAAc,SAACC,GACzC,EAAKC,SAAWN,EAAaO,YAC7B,EAAKC,wBAA0B,EAAKC,QAA0D,IAAlD,EAAKZ,OAAOI,OAAOS,6BACnE,IACAV,EAAaI,iBAAiB,SAAS,SAACC,GACpC,EAAKM,WAAY,CACrB,GAdA,CAeJ,GAEA,6BAOA,SAAgBC,GACZ,OAAO,EAAP,KACOA,GAAI,IACPC,UAAW,CACPC,GAAIF,EAAKE,KAGrB,GAEA,2BAOA,SAAcF,GACV,OAAOlB,SAASqB,iBAAiBH,EAAKI,WAAWC,QAAS,IAAK,IACnE,GAEA,qBAOA,SAAQC,GACCA,IAAgBC,MAAMD,KACvBA,EAAe,GAGnB,IAAME,EAAU,IAAOC,KAAKC,MAAMJ,EAAe,KAC3CK,EAAO,IAAIC,KAAKJ,GAEtB,MAAO,GAAP,OAAUK,OAAO,IAAD,OAAKF,EAAKG,kBAAmBC,OAAO,GAAE,YAAIF,OAAO,IAAD,OAAKF,EAAKK,kBAAmBD,OAAO,GACxG,GAEA,oBAKA,SAAOE,GACHjC,KAAKC,OAAOI,OAAO6B,WAAWD,EAClC,GAEA,0CAMA,WAAoBE,GAAK,8EAC2B,GAEnB,KAFvBC,EAAgBD,EAAME,QAAO,SAAAC,GAAI,OAAIA,CAAI,KAE7BC,OAAY,iEAIxBvC,KAAKC,OAAOuC,SAAS,CACvBL,MAAOC,EAAcK,KAAI,SAAAH,GAAI,OAAI,EAAKI,gBAAgBJ,EAAK,MAC7D,gDACL,8CAED,qCAMA,WAAetB,GAAI,gFACTA,EAAM,CAAF,mBACFhB,KAAK2C,iBAAmB3B,EAAKE,KAAMlB,KAAKC,OAAOI,OAAOU,UAAS,gBAC/Df,KAAKC,OAAOI,OAAOuC,QACnB5C,KAAKe,WAAY,EAAK,0BACff,KAAK2C,iBAAmB3B,EAAKE,GAAE,iBACtClB,KAAKC,OAAOI,OAAOwC,OACnB7C,KAAKe,WAAY,EAAI,yCAEff,KAAK8C,cAAc,CAAC9B,IAAO+B,MAAK,WAClC,EAAK9C,OAAOI,OAAOwC,MACvB,IAAE,QACF7C,KAAKe,WAAY,EACjBf,KAAKgD,aAAY,QAGrBhD,KAAK2C,eAAiB3B,EAAKE,GAAE,iDAEpC,8CAED,sCAOA,WAAgBA,GAAE,iFACDlB,KAAKC,OAAOgD,IAAIjC,KAAKE,GAAG,wFACxC,+CA1ML,iFA0MK,EA3M4B,GCEjCgC,OAAO1C,iBAAiB,kBAAkB,SAAU2C,GAChDD,OAAOE,aAAe,IAAI9D,EAAa,CACnCE,eAAgB6D,2SAChB5D,IAAK,CACDC,MAAO,iBACPC,KAAM,oCACNC,KAAM,WACNC,QAAS,oBAGjBqD,OAAOI,cAAc,IAAIC,MAAM,sBACnC,G","sources":["webpack:///./resources/js/helpers/music.js","webpack:///./resources/js/listen.js"],"sourcesContent":["export default class MusicManager {\n    // MARK: - Properties\n    /**\n     * The shared MusicKit instance.\n     *\n     * @type {MusicKit} shared\n     */\n    shared = null\n\n    /**\n     * Whether a music is playing.\n     *\n     * @type {boolean} isPlaying\n     */\n    isPlaying = false\n\n    /**\n     * Current music id.\n     *\n     * @type {string} currentMusicID\n     */\n    currentMusicID = ''\n\n    /**\n     * The audio player's current progress.\n     *\n     * @type {number} progress\n     */\n    progress = 0\n\n    /**\n     * The current playback duration.\n     *\n     * @type {string} currentPlaybackDuration\n     */\n    currentPlaybackDuration = \"00:30\"\n\n    /**\n     * The options used to initialize MusicKit.\n     *\n     * @type {{app: {build: string, icon: string, name: string, version: string}, developerToken: string}} options\n     */\n    options = {\n        developerToken: '',\n        app: {\n            build: '',\n            icon: '',\n            name: '',\n            version: ''\n        }\n    }\n\n    /**\n     * Whether the events have been initialized.\n     *\n     * @type {boolean} hasInitEvents\n     */\n    hasInitEvents = false\n\n    // MARK: - Initializers\n    /**\n     * Create a new instance of Kurozora Player.\n     *\n     * @constructor\n     *\n     * @param {{app: {build: string, icon: string, name: string, version: string}, developerToken: string}} options - options\n     */\n    constructor(options) {\n        MusicKit.configure(options)\n        this.shared = MusicKit.getInstance()\n    }\n\n    // MARK: - Functions\n    /**\n     * Bind events to the audio player.\n     */\n    initEvents() {\n        if (this.hasInitEvents) {\n            return\n        }\n        this.hasInitEvents = true\n\n        let audioElement = this.shared.player._currentPlayer.audio\n\n        audioElement.addEventListener('play', (event) => {\n            this.progress = audioElement.currentTime\n        })\n        audioElement.addEventListener('timeupdate', (event) => {\n            this.progress = audioElement.currentTime\n            this.currentPlaybackDuration = this.getTime(this.shared.player.currentPlaybackTimeRemaining * 1000)\n        })\n        audioElement.addEventListener('ended', (event) => {\n            this.isPlaying = false\n        })\n    }\n\n    /**\n     * Create a media item from the given song object.\n     *\n     * @param {MusicKit.Song} song - a MusicKit song object.\n     *\n     * @returns {*&{container: {id}}}\n     */\n    createMediaItem(song) {\n        return {\n            ...song,\n            container: {\n                id: song.id\n            }\n        }\n    }\n\n    /**\n     * Returns the url of the artwork for the given song.\n     *\n     * @param {MusicKit.Song} song - the song object\n     *\n     * @returns {string}\n     */\n    getArtworkURL(song) {\n        return MusicKit.formatArtworkURL(song.attributes.artwork, 200, 200)\n    }\n\n    /**\n     * Get time from milliseconds.\n     *\n     * @param {number} milliseconds\n     *\n     * @returns {string}\n     */\n    getTime(milliseconds) {\n        if (!milliseconds || isNaN(milliseconds)) {\n            milliseconds = 0\n        }\n\n        const seconds = 1000 * Math.round(milliseconds / 1000)\n        const date = new Date(seconds)\n\n        return `${String(`0${date.getUTCMinutes()}`).slice(-2)}:${String(`0${date.getUTCSeconds()}`).slice(-2)}`\n    }\n\n    /**\n     * Set audio player's current time to the given value.\n     *\n     * @param {number} value\n     */\n    seekTo(value) {\n        this.shared.player.seekToTime(value)\n    }\n\n    /**\n     * Create a queue with the given items.\n     *\n     * @param {MusicKit.Song[]} items - an array of songs.\n     * @returns {Promise<void>}\n     */\n    async setQueueItems(items) {\n        const filteredItems = items.filter(item => item)\n\n        if (filteredItems.length === 0) {\n            return\n        }\n\n        await this.shared.setQueue({\n            items: filteredItems.map(item => this.createMediaItem(item))\n        })\n    }\n\n    /**\n     * Toggle song.\n     *\n     * @param song\n     * @returns {Promise<void>}\n     */\n    async playSong(song) {\n        if (!!song) {\n            if (this.currentMusicID === song.id && this.shared.player.isPlaying) {\n                this.shared.player.pause()\n                this.isPlaying = false\n            } else if (this.currentMusicID === song.id) {\n                this.shared.player.play()\n                this.isPlaying = true\n            } else {\n                await this.setQueueItems([song]).then(() => {\n                    this.shared.player.play()\n                })\n                this.isPlaying = true\n                this.initEvents()\n            }\n\n            this.currentMusicID = song.id\n        }\n    }\n\n    /**\n     * Fetch song with the given ID.\n     *\n     * @param {string} id - id of the song\n     *\n     * @returns {Promise<{songName, albumName, isExplicit: *, artworkURL: *, artistName, artwork: *, songUrl: *}>}\n     */\n    async fetchSong(id) {\n        return await this.shared.api.song(id)\n    }\n}\n","import MusicManager from './helpers/music'\n\nwindow.addEventListener('musickitloaded', function ($event) {\n    window.musicManager = new MusicManager({\n        developerToken: process.env.MIX_APPLE_CLIENT_SECRET,\n        app: {\n            build: '1.17.0-alpha.1',\n            icon: '/images/static/icon/app_icon.webp',\n            name: 'Kurozora',\n            version: '1.17.0-alpha.1'\n        }\n    })\n    window.dispatchEvent(new Event('musicmanagerloaded'))\n})\n"],"names":["MusicManager","options","developerToken","app","build","icon","name","version","MusicKit","configure","this","shared","getInstance","hasInitEvents","audioElement","player","_currentPlayer","audio","addEventListener","event","progress","currentTime","currentPlaybackDuration","getTime","currentPlaybackTimeRemaining","isPlaying","song","container","id","formatArtworkURL","attributes","artwork","milliseconds","isNaN","seconds","Math","round","date","Date","String","getUTCMinutes","slice","getUTCSeconds","value","seekToTime","items","filteredItems","filter","item","length","setQueue","map","createMediaItem","currentMusicID","pause","play","setQueueItems","then","initEvents","api","window","$event","musicManager","process","dispatchEvent","Event"],"sourceRoot":""}