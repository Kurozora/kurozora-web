"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["/js/gif"],{

/***/ "./resources/js/gif.js":
/*!*****************************!*\
  !*** ./resources/js/gif.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helpers_gif__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/gif */ \"./resources/js/helpers/gif.js\");\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\nwindow.gifPlayer = function (url) {\n  return {\n    manager: null,\n    speed: '1.00',\n    isTouch: false,\n    showControls: false,\n    hideControlsTimeout: null,\n    isCustomSpeed: null,\n    playbackSpeeds: [0.5, 1.0, 1.50, 1.75, 2.00],\n    minPlaybackSpeed: 0.25,\n    maxPlaybackSpeed: 4.00,\n    pointerDownTime: 0,\n    isHovering: false,\n    init: function init() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              _this.$watch('speed', function (value) {\n                return _this.changeSpeed(value);\n              });\n              _this.manager = new _helpers_gif__WEBPACK_IMPORTED_MODULE_0__.GIF({\n                canvas: _this.$refs.canvas,\n                gifUrl: url,\n                speed: _this.speed\n              });\n              _this.manager.init();\n            case 1:\n              return _context.a(2);\n          }\n        }, _callee);\n      }))();\n    },\n    scrub: function scrub(event) {\n      this.manager.scrubTo(event.srcElement.value);\n    },\n    changeSpeed: function changeSpeed() {\n      var speed = parseFloat(this.speed);\n      if (isNaN(speed) || speed < this.minPlaybackSpeed) {\n        speed = this.minPlaybackSpeed;\n      } else if (speed > this.maxPlaybackSpeed) {\n        speed = this.maxPlaybackSpeed;\n      }\n      this.speed = speed.toFixed(2).toString();\n      this.isCustomSpeed = !this.playbackSpeeds.includes(speed);\n      this.manager.setSpeed(speed);\n    },\n    showControlsTemporarily: function showControlsTemporarily() {\n      var _this2 = this;\n      this.showControls = true;\n      clearTimeout(this.hideControlsTimeout);\n      this.hideControlsTimeout = setTimeout(function () {\n        if (!_this2.isTouch) _this2.showControls = false;\n      }, 2000);\n    },\n    toggleControls: function toggleControls() {\n      this.showControls = !this.showControls;\n    },\n    onPointerDown: function onPointerDown(event) {\n      if (event.target !== this.$refs.canvas && event.target !== this.$refs.controlOverlay && event.target !== event.currentTarget) {\n        return;\n      }\n      this.isTouch = event.pointerType !== 'mouse';\n      this.pointerDownTime = Date.now();\n    },\n    onPointerUp: function onPointerUp(event) {\n      if (!this.isHovering) {\n        var tapDuration = Date.now() - this.pointerDownTime;\n        if (tapDuration <= 200 && !this.isHovering) {\n          this.toggleControls();\n        }\n      }\n    },\n    onPointerEnter: function onPointerEnter(event) {\n      this.isTouch = event.pointerType !== 'mouse';\n      if (!this.isTouch) {\n        this.showControls = true;\n        this.isHovering = true;\n      }\n    },\n    onPointerLeave: function onPointerLeave(event) {\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n      if (!this.isTouch) {\n        this.showControls = false;\n        this.isHovering = false;\n      }\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/gif.js\n");

/***/ }),

/***/ "./resources/js/helpers/gif.js":
/*!*************************************!*\
  !*** ./resources/js/helpers/gif.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GIF: () => (/* binding */ GIF)\n/* harmony export */ });\n/* harmony import */ var gifuct_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gifuct-js */ \"./node_modules/gifuct-js/lib/index.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n/**\n * GIF Player class to handle loading and rendering GIFs on a canvas.\n */\nvar GIF = /*#__PURE__*/function () {\n  /**\n   * Creates a new GIF player instance.\n   *\n   * @param canvas {HTMLCanvasElement} Canvas element to render the GIF on.\n   * @param gifUrl {string} URL of the GIF to load.\n   * @param speed {number} Playback speed multiplier (default is 1.0).\n   */\n  function GIF(_ref) {\n    var canvas = _ref.canvas,\n      gifUrl = _ref.gifUrl,\n      _ref$speed = _ref.speed,\n      speed = _ref$speed === void 0 ? 1.0 : _ref$speed;\n    _classCallCheck(this, GIF);\n    /**\n     * Canvas element where the GIF will be rendered.\n     *\n     * @type {HTMLCanvasElement}\n     */\n    _defineProperty(this, \"canvas\", void 0);\n    /**\n     * URL of the GIF to load.\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"gifUrl\", void 0);\n    /**\n     * Playback speed multiplier for the GIF.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"speed\", void 0);\n    /**\n     * Indicates if the GIF is currently playing.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"isPlaying\", void 0);\n    /**\n     * Total number of frames in the GIF.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"frameCount\", void 0);\n    /**\n     * Total duration of the GIF in milliseconds.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"totalDuration\", void 0);\n    /**\n     * Elapsed time since the GIF started playing, in milliseconds.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"elapsedTime\", void 0);\n    /**\n     * Rendering context for the canvas.\n     *\n     * @type {RenderingContext | null}\n     */\n    _defineProperty(this, \"ctx\", void 0);\n    /**\n     * Array of parsed frames from the GIF.\n     *\n     * @type {ParsedFrame[]}\n     */\n    _defineProperty(this, \"frames\", void 0);\n    /**\n     * The current index of the frame being rendered.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"frameIndex\", void 0);\n    /**\n     * Timestamp of the last frame rendered, used for timing.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"lastRender\", void 0);\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.gifUrl = gifUrl;\n    this.speed = speed;\n    this.frames = [];\n    this.frameCount = 0;\n    this.frameIndex = 0;\n    this.isPlaying = false;\n    this.lastRender = 0;\n    this.totalDuration = 0;\n    this.elapsedTime = 0;\n  }\n  return _createClass(GIF, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n        var isReduced;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              _context.n = 1;\n              return this.loadGIF();\n            case 1:\n              this.frameCount = this.frames.length;\n              this.totalDuration = this.frames.map(function (frame) {\n                return frame.delay;\n              }).reduce(function (sum, delay) {\n                return sum + delay;\n              }, 0);\n              isReduced = window.matchMedia(\"(prefers-reduced-motion: reduce)\") === true || window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches === true;\n              if (!isReduced) {\n                this.play();\n              }\n            case 2:\n              return _context.a(2);\n          }\n        }, _callee, this);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n    /**\n     * Loads the GIF from the specified URL and parses its frames.\n     *\n     * @returns {Promise<void>}\n     */\n  }, {\n    key: \"loadGIF\",\n    value: (function () {\n      var _loadGIF = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var oReq;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              // const response = await fetch(this.gifUrl)\n              // const buffer = await response.arrayBuffer()\n              oReq = new XMLHttpRequest();\n              oReq.open('GET', this.gifUrl, true);\n              oReq.responseType = 'arraybuffer';\n              oReq.onload = function (oEvent) {\n                var buffer = oReq.response; // Note: not oReq.responseText\n                if (buffer) {\n                  var parsedGif = (0,gifuct_js__WEBPACK_IMPORTED_MODULE_0__.parseGIF)(buffer);\n                  this.frames = (0,gifuct_js__WEBPACK_IMPORTED_MODULE_0__.decompressFrames)(parsedGif, true);\n                }\n              }.bind(this);\n              oReq.send(null);\n            case 1:\n              return _context2.a(2);\n          }\n        }, _callee2, this);\n      }));\n      function loadGIF() {\n        return _loadGIF.apply(this, arguments);\n      }\n      return loadGIF;\n    }()\n    /**\n     * Starts the rendering loop for the GIF.\n     */\n    )\n  }, {\n    key: \"startRenderLoop\",\n    value: function startRenderLoop() {\n      var _this = this;\n      var _render = function render(timestamp) {\n        if (!_this.isPlaying) {\n          return;\n        }\n        var frame = _this.frames[_this.frameIndex];\n        var delay = (frame.delay || 10) / _this.speed; // delay is in hundredths of sec\n\n        if (timestamp - _this.lastRender > delay) {\n          _this.frameIndex = (_this.frameIndex + 1) % _this.frames.length;\n          _this.renderFrame(frame);\n          _this.lastRender = timestamp;\n        }\n        requestAnimationFrame(_render);\n      };\n      requestAnimationFrame(_render);\n    }\n\n    /**\n     * Renders a specific frame on the canvas.\n     *\n     * @param frame {ParsedFrame} The frame to render.\n     */\n  }, {\n    key: \"renderFrame\",\n    value: function renderFrame(frame) {\n      var imgData = new ImageData(new Uint8ClampedArray(frame.patch), frame.dims.width, frame.dims.height);\n      this.canvas.width = frame.dims.width;\n      this.canvas.height = frame.dims.height;\n      this.ctx.putImageData(imgData, frame.dims.left, frame.dims.top);\n      this.elapsedTime = this.frames.slice(0, this.frameIndex + (this.frameIndex === 0 ? 0 : 1)).map(function (frame) {\n        return frame.delay;\n      }).reduce(function (sum, delay) {\n        return sum + delay;\n      }, 0);\n    }\n\n    /**\n     * Starts playing the GIF.\n     */\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.isPlaying = true;\n      this.startRenderLoop();\n    }\n\n    /**\n     * Pauses the GIF playback.\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.isPlaying = false;\n    }\n\n    /**\n     * Toggles the playback state of the GIF.\n     */\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.isPlaying) {\n        this.pause();\n      } else {\n        this.play();\n      }\n    }\n\n    /**\n     * Scrubs to a specific frame in the GIF.\n     *\n     * @param time {number} The time in milliseconds to scrub to.\n     */\n  }, {\n    key: \"scrubTo\",\n    value: function scrubTo(time) {\n      this.pause();\n      var delay = 0;\n      this.frameIndex = this.frames.findIndex(function (frame) {\n        delay += frame.delay;\n        return delay >= time;\n      });\n      if (this.frameIndex === -1) {\n        this.frameIndex = this.frames.length - 1;\n      }\n      this.renderFrame(this.frames[this.frameIndex]);\n    }\n\n    /**\n     * Sets the playback speed of the GIF.\n     *\n     * @param speed\n     */\n  }, {\n    key: \"setSpeed\",\n    value: function setSpeed(speed) {\n      this.speed = speed;\n    }\n  }, {\n    key: \"formatTime\",\n    value: function formatTime(ms) {\n      var totalSeconds = Math.floor(ms / 1000);\n      var minutes = Math.floor(totalSeconds / 60);\n      var seconds = totalSeconds % 60;\n      return \"\".concat(minutes, \":\").concat(seconds.toString().padStart(2, '0'));\n    }\n  }, {\n    key: \"currentTimeFormatted\",\n    get: function get() {\n      return this.formatTime(this.elapsedTime);\n    }\n  }, {\n    key: \"totalTimeFormatted\",\n    get: function get() {\n      return this.formatTime(this.totalDuration);\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/helpers/gif.js\n");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["/js/vendor"], () => (__webpack_exec__("./resources/js/gif.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);