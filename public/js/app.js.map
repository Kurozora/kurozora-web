{"version":3,"file":"/js/app.js","mappings":"iFAAA,SAASA,EAAqBC,GAC1B,IAMIC,EANEC,EAAkB,GAClBC,EAAgB,KAChBC,EAAe,MACfC,EAAiB,OAKvB,GAAIL,GAJkB,QAIQ,CAC1B,IAAMM,EAASC,KAAKC,MAAMR,EAAUK,GAC9BI,EAAOF,KAAKC,MAAOR,EAAUK,EAAkBD,GACrDH,EAAS,GAAHS,OAAMJ,EAAM,MAAAI,OAAKD,EAAI,IAC/B,MAAO,GAAIT,GAAWK,EAAgB,CAClC,IAAMI,EAAOF,KAAKC,MAAMR,EAAUI,GAC5BO,EAAQJ,KAAKC,MAAOR,EAAUI,EAAgBD,GACpDF,EAAS,GAAHS,OAAMD,EAAI,MAAAC,OAAKC,EAAK,IAC9B,MAAO,GAAIX,GAAWI,EAAc,CAChC,IAAMK,EAAOF,KAAKC,MAAMR,EAAUI,GAC5BO,EAAQJ,KAAKC,MAAOR,EAAUI,EAAgBD,GAC9CS,EAAUL,KAAKC,MAAOR,EAAUG,EAAiBD,GACvDD,EAAS,GAAHS,OAAMD,EAAI,MAAAC,OAAKC,EAAK,MAAAD,OAAKE,EAAO,IAC1C,MAAO,GAAIZ,GAAWG,EAAe,CACjC,IAAMQ,EAAQJ,KAAKC,MAAMR,EAAUG,GAC7BS,EAAUL,KAAKC,MAAOR,EAAUG,EAAiBD,GACjDW,EAAOb,EAAUE,EACvBD,EAAS,GAAHS,OAAMC,EAAK,MAAAD,OAAKE,EAAO,MAAAF,OAAKG,EAAI,IAC1C,MAAO,GAAIb,GAAWE,EAAiB,CACnC,IAAMU,EAAUL,KAAKC,MAAMR,EAAUE,GAC/BW,EAAOb,EAAUE,EACvBD,EAAS,GAAHS,OAAME,EAAO,MAAAF,OAAKG,EAAI,IAChC,MACIZ,EAAS,GAAHS,OAAMV,EAAO,KAGvB,OAAOC,CACX,CClCAa,KAAKC,gBDoCE,SAA2BC,EAAoBC,GAClD,IAAMC,EAAmBJ,KAAKK,MACxBC,EAAgBb,KAAKC,OAAOQ,EAAqBE,GAAoB,KAE3E,OAAIE,EAAgB,EAETrB,EAAqBqB,GAAiB,YACtCA,GAAiB,GAAKb,KAAKc,IAAID,IAAkBH,EAEjDlB,EAAqBQ,KAAKc,IAAID,IAAkB,OAIhDrB,EADwBkB,EAAoBG,GACG,WAE9D,E,oBEpCAE,OAAOC,IAAMA,EAAAA,C,gBCjBbC,EAAQ,IAERC,SAASC,iBAAiB,iBAAiB,WACvCC,SAASC,KAAK,WAAW,SAAAC,IACrBC,EAD4BD,EAAJC,OACnB,SAAAC,GAAgC,IAA7BC,EAAMD,EAANC,OAAQC,EAAcF,EAAdE,eACG,MAAXD,IACAE,SAASC,SACTF,IAER,GACJ,GACJ,G","sources":["webpack:///./resources/js/extensions/Date+Broadcast.js","webpack:///./resources/js/extensions/index.js","webpack:///./resources/js/bootstrap.js","webpack:///./resources/js/app.js"],"sourcesContent":["function formatTimeDifference(seconds) {\n    const secondsInMinute = 60;\n    const secondsInHour = 60 * 60;\n    const secondsInDay = 24 * 60 * 60;\n    const secondsInMonth = 30 * secondsInDay;\n    const secondsInYear = 12 * secondsInMonth;\n\n    let result;\n\n    if (seconds >= secondsInYear) {\n        const months = Math.floor(seconds / secondsInMonth);\n        const days = Math.floor((seconds % secondsInMonth) / secondsInDay);\n        result = `${months}M ${days}d`;\n    } else if (seconds >= secondsInMonth) {\n        const days = Math.floor(seconds / secondsInDay);\n        const hours = Math.floor((seconds % secondsInDay) / secondsInHour);\n        result = `${days}d ${hours}h`;\n    } else if (seconds >= secondsInDay) {\n        const days = Math.floor(seconds / secondsInDay);\n        const hours = Math.floor((seconds % secondsInDay) / secondsInHour);\n        const minutes = Math.floor((seconds % secondsInHour) / secondsInMinute);\n        result = `${days}d ${hours}h ${minutes}m`;\n    } else if (seconds >= secondsInHour) {\n        const hours = Math.floor(seconds / secondsInHour);\n        const minutes = Math.floor((seconds % secondsInHour) / secondsInMinute);\n        const secs = seconds % secondsInMinute;\n        result = `${hours}h ${minutes}m ${secs}s`;\n    } else if (seconds >= secondsInMinute) {\n        const minutes = Math.floor(seconds / secondsInMinute);\n        const secs = seconds % secondsInMinute;\n        result = `${minutes}m ${secs}s`;\n    } else {\n        result = `${seconds}s`;\n    }\n\n    return result;\n}\n\nexport function getTimeUntilOrAgo(broadcastTimestamp, broadcastDuration) {\n    const currentTimestamp = Date.now()\n    const diffInSeconds = Math.floor((broadcastTimestamp - currentTimestamp) / 1000);\n\n    if (diffInSeconds > 0) {\n        // Future broadcast\n        return formatTimeDifference(diffInSeconds) + ' from now';\n    } else if (diffInSeconds <= 0 && Math.abs(diffInSeconds) <= broadcastDuration) {\n        // Broadcast happening (within the duration)\n        return formatTimeDifference(Math.abs(diffInSeconds)) + ' ago';\n    } else {\n        // After the broadcast duration, switch back to counting until next broadcast\n        const nextBroadcastInSeconds = broadcastDuration + diffInSeconds;\n        return formatTimeDifference(nextBroadcastInSeconds) + ' from now';\n    }\n}\n","import {getTimeUntilOrAgo} from './Date+Broadcast'\n\nDate.broadcastString = getTimeUntilOrAgo\n","/**\n * Load custom extensions.\n */\nimport './extensions/index'\n/**\n * iro is a modular, design-conscious color picker widget.\n * It works with colors in hex, RGB, HSV and HSL formats.\n */\nimport iro from \"@jaames/iro\"\n/**\n * LazySizes is an SEO-friendly and self-initializing lazyloader for images\n * iframes, scripts/widgets and much more. It prioritizes resources  by\n * differentiating between crucial in view and near view elements to make\n * perceived performance even faster.\n */\nimport 'lazysizes'\n\nwindow.iro = iro\n\n/**\n * Echo exposes an expressive API for subscribing to channels and listening\n * for events that are broadcast by Laravel.\n */\n\n// import Echo from \"laravel-echo\"\n\n// window.Pusher = require(\"pusher-js\")\n\n// window.Echo = new Echo({\n//     broadcaster: \"pusher\",\n//     key: process.env.MIX_PUSHER_APP_KEY,\n//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n//     forceTLS: true\n// })\n","require('./bootstrap')\n\ndocument.addEventListener('livewire:init', () => {\n    Livewire.hook('request', ({ fail }) => {\n        fail(({ status, preventDefault }) => {\n            if (status === 419) {\n                location.reload()\n                preventDefault()\n            }\n        })\n    })\n})\n"],"names":["formatTimeDifference","seconds","result","secondsInMinute","secondsInHour","secondsInDay","secondsInMonth","months","Math","floor","days","concat","hours","minutes","secs","Date","broadcastString","broadcastTimestamp","broadcastDuration","currentTimestamp","now","diffInSeconds","abs","window","iro","require","document","addEventListener","Livewire","hook","_ref","fail","_ref2","status","preventDefault","location","reload"],"sourceRoot":""}