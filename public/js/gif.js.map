{"version":3,"file":"/js/gif.js","mappings":"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","sources":["webpack:///./resources/js/helpers/gif.js","webpack:///./resources/js/gif.js"],"sourcesContent":["import {decompressFrames, ParsedFrame, parseGIF} from 'gifuct-js'\n\n/**\n * GIF Player class to handle loading and rendering GIFs on a canvas.\n */\nexport class GIF {\n    /**\n     * Canvas element where the GIF will be rendered.\n     *\n     * @type {HTMLCanvasElement}\n     */\n    canvas\n\n    /**\n     * Rendering context for the canvas.\n     *\n     * @type {RenderingContext | null}\n     */\n    ctx\n\n    /**\n     * Canvas used for temporary rendering of GIF frames.\n     *\n     * @type {HTMLCanvasElement}\n     */\n    tempCanvas\n\n    /**\n     * Rendering context for the temporary canvas.\n     *\n     * @type {RenderingContext | null}\n     */\n    tempCtx\n\n    /**\n     * Canvas used for full GIF rendering.\n     *\n     * @type {HTMLCanvasElement}\n     */\n    gifCanvas\n\n    /**\n     * Rendering context for the full GIF canvas.\n     *\n     * @type {RenderingContext | null}\n     */\n    gifCtx\n\n    /**\n     * ImageData object to hold the current frame's pixel data.\n     *\n     * @type {ImageData | null}\n     */\n    imgData\n\n    /**\n     * URL of the GIF to load.\n     *\n     * @type {string}\n     */\n    gifUrl\n\n    /**\n     * Playback speed multiplier for the GIF.\n     *\n     * @type {number}\n     */\n    speed\n\n    /**\n     * Indicates if the GIF is currently playing.\n     *\n     * @type {boolean}\n     */\n    isPlaying\n\n    /**\n     * Total number of frames in the GIF.\n     *\n     * @type {number}\n     */\n    frameCount\n\n    /**\n     * Total duration of the GIF in milliseconds.\n     *\n     * @type {number}\n     */\n    totalDuration\n\n    /**\n     * Elapsed time since the GIF started playing, in milliseconds.\n     *\n     * @type {number}\n     */\n    elapsedTime\n\n    /**\n     * Array of parsed frames from the GIF.\n     *\n     * @type {ParsedFrame[]}\n     */\n    frames\n\n    /**\n     * The current index of the frame being rendered.\n     *\n     * @type {number}\n     */\n    frameIndex\n\n    /**\n     * Timestamp of the last frame rendered, used for timing.\n     *\n     * @type {number}\n     */\n    lastRender\n\n    /**\n     * Determines if the GIF needs to be cleared before rendering the next frame.\n     *\n     * @type {boolean}\n     */\n    needsDisposal\n\n    /**\n     * Creates a new GIF player instance.\n     *\n     * @param canvas {HTMLCanvasElement} Canvas element to render the GIF on.\n     * @param gifUrl {string} URL of the GIF to load.\n     * @param speed {number} Playback speed multiplier (default is 1.0).\n     */\n    constructor({canvas, gifUrl, speed = 1.0}) {\n        // User canvas\n        this.canvas = canvas\n        this.ctx = canvas.getContext('2d')\n        // GIF patch canvas\n        this.tempCanvas = document.createElement('canvas')\n        this.tempCtx = this.tempCanvas.getContext('2d')\n        // Full GIF canvas\n        this.gifCanvas = document.createElement('canvas')\n        this.gifCtx = this.gifCanvas.getContext('2d')\n\n        this.gifUrl = gifUrl\n        this.speed = speed\n\n        this.frames = []\n        this.frameCount = 0\n        this.frameIndex = 0\n        this.isPlaying = false\n        this.lastRender = 0\n        this.totalDuration = 0\n        this.elapsedTime = 0\n    }\n\n    /**\n     * Initializes the GIF player by loading the GIF and setting up the frames.\n     *\n     * @returns {Promise<void>}\n     */\n    async init() {\n        await this.loadGIF()\n        this.frameCount = this.frames.length\n        this.totalDuration = this.frames.map(frame => frame.delay)\n            .reduce(function (sum, delay) {\n                return sum + delay\n            }, 0)\n\n        const isReduced = window.matchMedia(`(prefers-reduced-motion: reduce)`) === true || window.matchMedia(`(prefers-reduced-motion: reduce)`).matches === true;\n        if (!isReduced) {\n            this.play()\n        }\n    }\n\n    /**\n     * Loads the GIF from the specified URL and parses its frames.\n     *\n     * @returns {Promise<void>}\n     */\n    async loadGIF() {\n        const response = await fetch(this.gifUrl)\n        const buffer = await response.arrayBuffer()\n        const parsedGif = parseGIF(buffer)\n        this.frames = decompressFrames(parsedGif, true)\n\n        this.canvas.width = this.frames[0].dims.width\n        this.canvas.height = this.frames[0].dims.height\n\n        this.gifCanvas.width = this.canvas.width\n        this.gifCanvas.height = this.canvas.height\n    }\n\n    /**\n     * Starts the rendering loop for the GIF.\n     */\n    startRenderLoop() {\n        const render = (timestamp) => {\n            if (!this.isPlaying) {\n                return\n            }\n\n            const frame = this.frames[this.frameIndex]\n            const delay = (frame.delay || 10) / this.speed\n\n            if (timestamp - this.lastRender > delay) {\n                this.frameIndex = (this.frameIndex + 1) % this.frames.length\n                this.renderFrame(frame)\n                this.lastRender = timestamp\n            }\n\n            requestAnimationFrame(render)\n        }\n        requestAnimationFrame(render)\n    }\n\n    /**\n     * Renders a specific patch of the GIF frame onto the temporary canvas.\n     *\n     * @param frame {ParsedFrame} The frame to render.\n     */\n    renderPatch(frame) {\n        if (\n            !this.imgData ||\n            frame.dims.width !== this.imgData.width ||\n            frame.dims.height !== this.imgData.height\n        ) {\n            this.tempCanvas.width = frame.dims.width\n            this.tempCanvas.height = frame.dims.height\n            this.imgData = this.tempCtx.createImageData(frame.dims.width, frame.dims.height)\n        }\n\n        // Set the patch data as an override\n        this.imgData.data.set(frame.patch)\n\n        // Draw the patch back over the canvas\n        this.tempCtx.putImageData(this.imgData, 0,0)\n        this.gifCtx.drawImage(this.tempCanvas, 0,0)\n    }\n\n    /**\n     * Manipulates the GIF canvas to apply the current frame's pixel data.\n     */\n    manipulate() {\n        let imgData = this.gifCtx.getImageData(0,0, this.gifCanvas.width, this.gifCanvas.height)\n        this.ctx.putImageData(imgData, 0,0)\n    }\n\n    /**\n     * Renders a specific frame on the canvas.\n     *\n     * @param frame {ParsedFrame} The frame to render.\n     */\n    renderFrame(frame) {\n        if (this.needsDisposal) {\n            this.gifCtx.clearRect(0,0, this.canvas.width, this.canvas.height)\n            this.needsDisposal = false\n        }\n\n        this.renderPatch(frame)\n        this.manipulate()\n\n        if (frame.disposalType === 2) {\n            this.needsDisposal = true\n        }\n\n        this.elapsedTime = this.frames\n            .slice(0, this.frameIndex + (this.frameIndex === 0 ? 0 : 1))\n            .map(frame => frame.delay)\n            .reduce((sum, delay) => sum + delay, 0)\n    }\n\n    /**\n     * Starts playing the GIF.\n     */\n    play() {\n        this.isPlaying = true\n        this.startRenderLoop()\n    }\n\n    /**\n     * Pauses the GIF playback.\n     */\n    pause() {\n        this.isPlaying = false\n    }\n\n    /**\n     * Toggles the playback state of the GIF.\n     */\n    toggle() {\n        if(this.isPlaying) {\n            this.pause()\n        } else {\n            this.play()\n        }\n    }\n\n    /**\n     * Scrubs to a specific frame in the GIF.\n     *\n     * @param time {number} The time in milliseconds to scrub to.\n     */\n    scrubTo(time) {\n        this.pause()\n\n        let delay = 0\n        this.frameIndex = this.frames.findIndex(frame => {\n            delay += frame.delay\n            return delay >= time\n        })\n\n        if (this.frameIndex === -1) {\n            this.frameIndex = this.frames.length - 1\n        }\n\n        let frame = this.frames[this.frameIndex]\n\n        if (frame.disposalType === 2) {\n            this.needsDisposal = true\n        }\n\n        this.renderFrame(frame)\n    }\n\n    /**\n     * Sets the playback speed of the GIF.\n     *\n     * @param speed\n     */\n    setSpeed(speed) {\n        this.speed = speed\n    }\n\n    /**\n     * Formats a time in milliseconds into a human-readable string.\n     *\n     * @param ms {number} Time in milliseconds to format.\n     *\n     * @returns {string}\n     */\n    formatTime(ms) {\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    }\n\n    /**\n     * Formats the current time of the GIF into a human-readable string.\n     *\n     * @returns {string}\n     */\n    get currentTimeFormatted() {\n        return this.formatTime(this.elapsedTime);\n    }\n\n    /**\n     * Formats the total duration of the GIF into a human-readable string.\n     *\n     * @returns {string}\n     */\n    get totalTimeFormatted() {\n        return this.formatTime(this.totalDuration);\n    }\n}\n","import {GIF} from './helpers/gif'\n\nwindow.gifPlayer = (url) => ({\n    manager: null,\n    speed: '1.00',\n    isTouch: false,\n    showControls: false,\n    hideControlsTimeout: null,\n    isCustomSpeed: null,\n    playbackSpeeds: [0.5, 1.0, 1.50, 1.75, 2.00],\n    minPlaybackSpeed: 0.25,\n    maxPlaybackSpeed: 4.00,\n    pointerDownTime: 0,\n    isHovering: false,\n\n    async init() {\n        this.$watch('speed', (value) => this.changeSpeed(value))\n\n        this.manager = new GIF({\n            canvas: this.$refs.canvas,\n            gifUrl: url,\n            speed: this.speed\n        })\n        this.manager.init()\n    },\n\n    scrub(event) {\n        this.manager.scrubTo(event.srcElement.value)\n    },\n\n    changeSpeed() {\n        let speed = parseFloat(this.speed)\n\n        if (isNaN(speed) || speed < this.minPlaybackSpeed) {\n            speed = this.minPlaybackSpeed\n        } else if (speed > this.maxPlaybackSpeed) {\n            speed = this.maxPlaybackSpeed\n        }\n\n        this.speed = speed.toFixed(2).toString()\n        this.isCustomSpeed = !this.playbackSpeeds.includes(speed)\n        this.manager.setSpeed(speed)\n    },\n\n    showControlsTemporarily() {\n        this.showControls = true\n\n        clearTimeout(this.hideControlsTimeout)\n\n        this.hideControlsTimeout = setTimeout(() => {\n            if (!this.isTouch) this.showControls = false\n        }, 2000)\n    },\n\n    toggleControls() {\n        this.showControls = !this.showControls\n    },\n\n    onPointerDown(event) {\n        if (\n            event.target !== this.$refs.canvas\n            && event.target !== this.$refs.controlOverlay\n            && event.target !== event.currentTarget\n        ) {\n            return\n        }\n\n        this.isTouch = event.pointerType !== 'mouse'\n        this.pointerDownTime = Date.now()\n    },\n\n    onPointerUp(event) {\n        if (!this.isHovering) {\n            const tapDuration = Date.now() - this.pointerDownTime\n\n            if (tapDuration <= 200 && !this.isHovering) {\n                this.toggleControls()\n            }\n        }\n    },\n\n    onPointerEnter(event) {\n        this.isTouch = event.pointerType !== 'mouse'\n\n        if (!this.isTouch) {\n            this.showControls = true\n            this.isHovering = true\n        }\n    },\n\n    onPointerLeave(event) {\n        if (event.target !== event.currentTarget) {\n            return\n        }\n\n        if (!this.isTouch) {\n            this.showControls = false\n            this.isHovering = false\n        }\n    }\n})\n"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","_defineProperty","_typeof","toPrimitive","String","Number","_toPrimitive","GIF","_ref","canvas","gifUrl","_ref$speed","speed","_classCallCheck","this","ctx","getContext","tempCanvas","document","createElement","tempCtx","gifCanvas","gifCtx","frames","frameCount","frameIndex","isPlaying","lastRender","totalDuration","elapsedTime","_init","_callee","_context","loadGIF","map","frame","delay","reduce","sum","window","matchMedia","matches","play","_loadGIF","_callee2","response","buffer","parsedGif","_context2","fetch","arrayBuffer","parseGIF","decompressFrames","width","dims","height","_this","render","timestamp","renderFrame","requestAnimationFrame","imgData","createImageData","data","set","patch","putImageData","drawImage","getImageData","needsDisposal","clearRect","renderPatch","manipulate","disposalType","slice","startRenderLoop","pause","time","findIndex","ms","totalSeconds","Math","floor","minutes","seconds","concat","toString","padStart","get","formatTime","gifPlayer","url","manager","isTouch","showControls","hideControlsTimeout","isCustomSpeed","playbackSpeeds","minPlaybackSpeed","maxPlaybackSpeed","pointerDownTime","isHovering","init","$watch","changeSpeed","$refs","scrub","event","scrubTo","srcElement","parseFloat","isNaN","toFixed","includes","setSpeed","showControlsTemporarily","_this2","clearTimeout","setTimeout","toggleControls","onPointerDown","target","controlOverlay","currentTarget","pointerType","Date","now","onPointerUp","onPointerEnter","onPointerLeave"],"sourceRoot":""}