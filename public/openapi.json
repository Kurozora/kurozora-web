{
  "openapi": "3.0.0",
  "info": {
    "description": "This is the documentation for Kurozora API.",
    "version": "1.0.8",
    "title": "Kurozora API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "kurozoraapp@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://kurozora.app/api/v1",
      "description": "Kurozora LIVE"
    },
    {
      "url": "http://kurozora-web.test/api/v1",
      "description": "Kurozora LOCAL"
    }
  ],
  "tags": [
    {
      "name": "explore",
      "description": "Everything explore page related"
    },
    {
      "name": "users",
      "description": "Everything user related"
    },
    {
      "name": "notifications",
      "description": "Everything user notification related"
    },
    {
      "name": "anime",
      "description": "Everything anime related"
    },
    {
      "name": "anime-seasons",
      "description": "Everything anime seasons related"
    },
    {
      "name": "anime-episodes",
      "description": "Everything anime episodes related"
    },
    {
      "name": "actors",
      "description": "Everything actor related"
    },
    {
      "name": "characters",
      "description": "Everything character related"
    },
    {
      "name": "genres",
      "description": "Everything genre related"
    },
    {
      "name": "forum-sections",
      "description": "Everything forum sections related"
    },
    {
      "name": "forum-threads",
      "description": "Everything forum threads related"
    },
    {
      "name": "forum-replies",
      "description": "Everything forum replies related"
    },
    {
      "name": "sessions",
      "description": "Everything session related"
    },
    {
      "name": "studios",
      "description": "Everything studio related"
    },
    {
      "name": "themes",
      "description": "Everything theme related"
    },
    {
      "name": "misc",
      "description": "All other endpoints"
    }
  ],
  "paths": {
    "/info": {
      "get": {
        "tags": [
          "misc"
        ],
        "operationId": "getInfo",
        "summary": "API info.",
        "description": "Plain API JSON response.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/explore": {
      "get": {
        "security": [
          {
          },
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "explore"
        ],
        "operationId": "getExplore",
        "summary": "(optional authentication) Explore page.",
        "description": "This endpoint will retrieve the details to for the explore page.",
        "parameters": [
          {
            "in": "query",
            "name": "genre_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "ID of the genre to filter on."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "users"
        ],
        "operationId": "postUsers",
        "summary": "Register a new user",
        "description": "This endpoint will create a new user based on the given details.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The new user's username",
                    "example": "Kurozora"
                  },
                  "password": {
                    "type": "string",
                    "description": "The new user's password"
                  },
                  "email": {
                    "type": "string",
                    "description": "The new user's email"
                  },
                  "profileImage": {
                    "type": "string",
                    "format": "binary",
                    "description": "The new user's avatar image"
                  }
                },
                "required": [
                  "username",
                  "password",
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/register-siwa": {
      "post": {
        "tags": [
          "users"
        ],
        "operationId": "postRegisterSiwA",
        "summary": "Register a new user (sign in with Apple)",
        "description": "This endpoint will create a new user using Sign in with Apple.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The new user's email"
                  },
                  "siwa_id": {
                    "type": "string",
                    "description": "The new user's SIWA ID"
                  },
                  "platform": {
                    "type": "string",
                    "description": "The platform that was used to create the session",
                    "example": "iOS"
                  },
                  "platform_version": {
                    "type": "string",
                    "description": "The platform version that was used to create the session",
                    "example": "13.4"
                  },
                  "device_vendor": {
                    "type": "string",
                    "description": "The device vendor that was used to create the session",
                    "example": "Apple"
                  },
                  "device_model": {
                    "type": "string",
                    "description": "The device model that was used to create the session",
                    "example": "iPhone 11 Pro Max"
                  }
                },
                "required": [
                  "email",
                  "siwa_id",
                  "platform",
                  "platform_version",
                  "device_vendor",
                  "device_model"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/login-siwa": {
      "post": {
        "tags": [
          "users"
        ],
        "operationId": "postLoginSiwA",
        "summary": "Log a user in via SIWA (sign in with Apple)",
        "description": "This endpoint will log a user in using Sign in with Apple.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_token": {
                    "type": "string",
                    "description": "The identity token (JWT) as provided by Apple"
                  },
                  "platform": {
                    "type": "string",
                    "description": "The platform that was used to create the session",
                    "example": "iOS"
                  },
                  "platform_version": {
                    "type": "string",
                    "description": "The platform version that was used to create the session",
                    "example": "13.4"
                  },
                  "device_vendor": {
                    "type": "string",
                    "description": "The device vendor that was used to create the session",
                    "example": "Apple"
                  },
                  "device_model": {
                    "type": "string",
                    "description": "The device model that was used to create the session",
                    "example": "iPhone 11 Pro Max"
                  }
                },
                "required": [
                  "identity_token",
                  "platform",
                  "platform_version",
                  "device_vendor",
                  "device_model"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/reset-password": {
      "post": {
        "tags": [
          "users"
        ],
        "operationId": "postResetPassword",
        "summary": "Request a password reset for a user",
        "description": "This endpoint will send an email to the user to reset their password.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email of the user to request a password reset."
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/{userID}/sessions": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersSessions",
        "summary": "Get a list of the user's sessions",
        "description": "This endpoint will retrieve a list of sessions for the user.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/{userID}/library": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersLibrary",
        "summary": "Get an overview of the user's Anime library",
        "description": "This endpoint will retrieve the list of Anime in a user's library.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/KurozoraLibraryStatus"
            },
            "required": true,
            "description": "The status to retrieve the library items for."
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Available sorting options:\n- title(asc/desc)\n- age(newest/oldest)\n- rating(worst/best)\n- my-rating(worst/best)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      },
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "postUsersLibrary",
        "summary": "Add an Anime to the user's Anime library",
        "description": "This endpoint will add to the list of Anime in a user's library.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "anime_id": {
                    "type": "integer",
                    "description": "The ID of the Anime to add."
                  },
                  "status": {
                    "type": "string",
                    "description": "The watch status to assign to the Anime.",
                    "example": "Watching"
                  }
                },
                "required": [
                  "anime_id",
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/{userID}/library/delete": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "postUsersLibraryDelete",
        "summary": "Remove an Anime from the user's Anime library",
        "description": "This endpoint will remove from the list of Anime in a user's library.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "anime_id": {
                    "type": "integer",
                    "description": "The ID of the Anime to remove."
                  }
                },
                "required": [
                  "anime_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/{userID}/library/mal-import": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "postUsersLibraryMALImport",
        "summary": "Import a MAL export file into the user's library",
        "description": "This endpoint will import a MAL export file into the user's library.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The MAL export file"
                  },
                  "behavior": {
                    "$ref": "#/components/schemas/MALImportBehavior",
                    "description": "The behavior to use while processing the import request."
                  }
                },
                "required": [
                  "file",
                  "behavior"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/{userID}/library/search": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersLibrarySearch",
        "summary": "Searches Anime in library.",
        "description": "This endpoint will retrieve the search results of Anime in the user's library.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The search query."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/{userID}/favorite-anime": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersFavoriteAnime",
        "summary": "Get an overview of the user's favorite Anime",
        "description": "This endpoint will retrieve the list of Anime in the user's favorites list.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      },
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "postUsersFavoriteAnime",
        "summary": "Add or remove an Anime to the user's Anime favorites",
        "description": "This endpoint will add or remove to the list of Anime in a user's favorites.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "anime_id": {
                    "type": "integer",
                    "description": "The ID of the Anime to add."
                  },
                  "is_favorite": {
                    "type": "integer",
                    "description": "Whether to add or remove the anime.\n- 0 = remove\n- 1 = add",
                    "enum": [
                      0,
                      1
                    ]
                  }
                },
                "required": [
                  "anime_id",
                  "is_favorite"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/{userID}/profile": {
      "get": {
        "security": [
          {
          },
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersProfile",
        "summary": "(optional authentication) User profile details.",
        "description": "This endpoint will retrieve the details of a user's profile.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      },
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "postUsersProfile",
        "summary": "Updates a user's profile information",
        "description": "This endpoint will update a user's profile information.\n<h3><strong>WARNING: You should only send the request body parameters that actually need to be changed!</strong></h3>",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "biography": {
                    "type": "string",
                    "description": "The new biography to set."
                  },
                  "profileImage": {
                    "type": "string",
                    "format": "binary",
                    "description": "The new user's avatar image"
                  },
                  "bannerImage": {
                    "type": "string",
                    "format": "binary",
                    "description": "The new user's banner image"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersMe",
        "summary": "User profile details.",
        "description": "This endpoint will retrieve the details of the current user's profile.",
        "parameters": [
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/{userID}/notifications": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersNotifications",
        "summary": "User's list of notifications.",
        "description": "This endpoint will retrieve the list of a user's notifications.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/search": {
      "get": {
        "security": [
          {
          },
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersSearch",
        "summary": "(optional authentication) Searches users.",
        "description": "This endpoint will retrieve the search results for users.\n<h3><strong>TIP: You can prefix your search with \"id:\" to search for a user with a specific ID.</strong></h3>",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The search query."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/{userID}/follow": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "postUsersFollow",
        "summary": "Follow or unfollow another user",
        "description": "This endpoint will follow or unfollow another user.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "follow": {
                    "type": "integer",
                    "description": "Whether to follow or unfollow the user.\n- 0 = unfollow\n- 1 = follow",
                    "enum": [
                      0,
                      1
                    ]
                  }
                },
                "required": [
                  "follow"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/{userID}/followers": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersFollowers",
        "summary": "Retrieve the user's list of followers.",
        "description": "This endpoint will retrieve the user's list of followers.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "string",
              "example": "1"
            },
            "required": false,
            "description": "The page to retrieve followers from. (starts at 1)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/users/{userID}/following": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "operationId": "getUsersFollowing",
        "summary": "Retrieve the user's list of following users.",
        "description": "This endpoint will retrieve the user's list of following users.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the user."
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "string",
              "example": "1"
            },
            "required": false,
            "description": "The page to retrieve followers from. (starts at 1)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/notifications/{notificationUUID}": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "notifications"
        ],
        "operationId": "getNotifications",
        "summary": "Gets the details of a notification",
        "description": "This endpoint will retrieve the details of a notification.",
        "parameters": [
          {
            "in": "path",
            "name": "notificationUUID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "UUID of the notification to be retrieved."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/notifications/{notificationUUID}/delete": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "notifications"
        ],
        "operationId": "getNotificationsDelete",
        "summary": "Deletes a notification from the database",
        "description": "This endpoint will delete a user's notification.",
        "parameters": [
          {
            "in": "path",
            "name": "notificationUUID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "UUID of the notification to be deleted."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/notifications/update": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "notifications"
        ],
        "operationId": "postNotificationsUpdate",
        "summary": "Update a single, multiple or all notifications' status",
        "description": "This endpoint will update the status of a single, multiple or all notifications.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "notification": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The UUID of the notification to update. Use \"all\" to update all of the user's notifications."
                  },
                  "read": {
                    "type": "integer",
                    "description": "Mark notification(s) as read or unread.\n- 0 = unread\n- 1 = read",
                    "minimum": 0,
                    "maximum": 1
                  }
                },
                "required": [
                  "notification",
                  "read"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/sessions": {
      "post": {
        "tags": [
          "sessions"
        ],
        "operationId": "postSessions",
        "summary": "Create a new session (login)",
        "description": "This endpoint will create a new session for a user.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The user's email address"
                  },
                  "password": {
                    "type": "string",
                    "description": "The user's password"
                  },
                  "platform": {
                    "type": "string",
                    "description": "The platform that was used to create the session",
                    "example": "iOS"
                  },
                  "platform_version": {
                    "type": "string",
                    "description": "The platform version that was used to create the session",
                    "example": "13.4"
                  },
                  "device_vendor": {
                    "type": "string",
                    "description": "The device vendor that was used to create the session",
                    "example": "Apple"
                  },
                  "device_model": {
                    "type": "string",
                    "description": "The device model that was used to create the session",
                    "example": "iPhone 11 Pro Max"
                  }
                },
                "required": [
                  "email",
                  "password",
                  "platform",
                  "platform_version",
                  "device_vendor",
                  "device_model"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/sessions/{sessionID}": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "sessions"
        ],
        "operationId": "getSessions",
        "summary": "Gets the details of a session",
        "description": "This endpoint will retrieve the details of a session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the session to be retrieved."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/sessions/{sessionID}/update": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "sessions"
        ],
        "operationId": "postSessionsUpdate",
        "summary": "Updates the information of a session",
        "description": "This endpoint will update the information of a sessions.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "apn_device_token": {
                    "type": "string",
                    "description": "The new APN device token for the session."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "sessionID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the session to be updated."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/sessions/{sessionID}/delete": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "sessions"
        ],
        "operationId": "postSessionsDelete",
        "summary": "Deletes a session",
        "description": "This endpoint will delete a session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the session to be deleted."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/anime/{animeID}": {
      "get": {
        "security": [
          {
          },
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "anime"
        ],
        "operationId": "getAnime",
        "summary": "(optional authentication) Anime details.",
        "description": "This endpoint will retrieve the details of an Anime item.",
        "parameters": [
          {
            "in": "path",
            "name": "animeID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the anime."
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "required": false,
            "description": "The relations to include in the response. Available relations are:\n- actors\n- characters\n- cast\n- relations\n- seasons"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/anime/{animeID}/actors": {
      "get": {
        "tags": [
          "anime"
        ],
        "operationId": "getAnimeActors",
        "summary": "Anime actor information.",
        "description": "This endpoint will retrieve the actors of an Anime item.",
        "parameters": [
          {
            "in": "path",
            "name": "animeID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the anime."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/anime/{animeID}/characters": {
      "get": {
        "tags": [
          "anime"
        ],
        "operationId": "getAnimeCharacters",
        "summary": "Anime character information.",
        "description": "This endpoint will retrieve the characters of an Anime item.",
        "parameters": [
          {
            "in": "path",
            "name": "animeID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the anime."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/anime/{animeID}/cast": {
      "get": {
        "tags": [
          "anime"
        ],
        "operationId": "getAnimeCast",
        "summary": "Anime actor-character information.",
        "description": "This endpoint will retrieve the actor-characters of an Anime item.",
        "parameters": [
          {
            "in": "path",
            "name": "animeID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the anime."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/anime/{animeID}/relations": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "anime"
        ],
        "operationId": "getAnimeRelations",
        "summary": "Anime all relations information.",
        "description": "This endpoint will retrieve the relations of an Anime item.",
        "parameters": [
          {
            "in": "path",
            "name": "animeID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the anime."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/anime/{animeID}/seasons": {
      "get": {
        "tags": [
          "anime"
        ],
        "operationId": "getAnimeSeasons",
        "summary": "Anime all seasons information.",
        "description": "This endpoint will retrieve the seasons of an Anime item.",
        "parameters": [
          {
            "in": "path",
            "name": "animeID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the anime."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/anime/{animeID}/rate": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "anime"
        ],
        "operationId": "postAnimeRate",
        "summary": "Rate an Anime.",
        "description": "This endpoint will allow user's to leave a rating for an Anime.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "rating": {
                    "type": "number",
                    "format": "float",
                    "description": "The rating to leave.",
                    "example": 3.5,
                    "minimum": 1,
                    "maximum": 5
                  }
                },
                "required": [
                  "rating"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "animeID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the anime."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/anime/search": {
      "get": {
        "security": [
          {
          },
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "anime"
        ],
        "operationId": "getAnimeSearch",
        "summary": "(optional authentication) Searches Anime.",
        "description": "This endpoint will retrieve the search results for Anime.\n<h3><strong>TIP: You can prefix your search with \"id:\" to search for Anime with a specific ID.</strong></h3>",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The search query."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/forum-sections": {
      "get": {
        "tags": [
          "forum-sections"
        ],
        "operationId": "getForumSections",
        "summary": "Forum sections list.",
        "description": "This endpoint will retrieve the forum sections.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/forum-sections/{sectionID}": {
      "get": {
        "tags": [
          "forum-sections"
        ],
        "operationId": "getForumSectionsDetails",
        "summary": "Forum section details.",
        "description": "This endpoint will retrieve the details for a forum section.",
        "parameters": [
          {
            "in": "path",
            "name": "sectionID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the forum section."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/forum-sections/{sectionID}/threads": {
      "get": {
        "security": [
          {
          },
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "forum-sections"
        ],
        "operationId": "getForumSectionsThreads",
        "summary": "(optional authentication) Forum section get threads.",
        "description": "This endpoint will retrieve the threads in a forum section.",
        "parameters": [
          {
            "in": "path",
            "name": "sectionID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the forum section."
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "example": "recent"
            },
            "required": true,
            "description": "The method of ordering the threads."
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "string",
              "example": "1"
            },
            "required": false,
            "description": "The page to retrieve threads from. (starts at 1)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      },
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "forum-sections"
        ],
        "operationId": "postForumSectionsThreads",
        "summary": "Submit a new thread to a section.",
        "description": "This endpoint will submit a new thread.",
        "parameters": [
          {
            "in": "path",
            "name": "sectionID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the forum section."
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the thread."
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of the thread."
                  }
                },
                "required": [
                  "title",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/actors": {
      "get": {
        "tags": [
          "actors"
        ],
        "operationId": "getActors",
        "summary": "Actors list.",
        "description": "This endpoint will retrieve the actors.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/actors/{actorID}": {
      "get": {
        "tags": [
          "actors"
        ],
        "operationId": "getActorsDetails",
        "summary": "Get actor details.",
        "description": "This endpoint will retrieve the details for a actor.",
        "parameters": [
          {
            "in": "path",
            "name": "actorID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the actor."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/anime-seasons/{seasonID}": {
      "get": {
        "tags": [
          "anime-seasons"
        ],
        "operationId": "getAnimeSeasonsDetails",
        "summary": "Get specific season details.",
        "description": "This endpoint will retrieve the details of a specific season.",
        "parameters": [
          {
            "in": "path",
            "name": "seasonID",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": true,
            "description": "ID of the season."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/anime-seasons/{seasonID}/episodes": {
      "get": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "anime-seasons"
        ],
        "operationId": "getAnimeSeasonsEpisodes",
        "summary": "Retrieve season episodes.",
        "description": "This endpoint will retrieve the episodes in a certain season.",
        "parameters": [
          {
            "in": "path",
            "name": "seasonID",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": true,
            "description": "ID of the season."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/anime-episodes/{episodeID}/watched": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "anime-episodes"
        ],
        "operationId": "postAnimeEpisodesWatched",
        "summary": "Marks an episode as \"watched\" or \"not watched\".",
        "description": "This endpoint will updated the watched status for an episode.",
        "parameters": [
          {
            "in": "path",
            "name": "episodeID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the episode."
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "watched": {
                    "$ref": "#/components/schemas/EpisodeWatchStatus",
                    "description": "Mark episode watched or not.\n- -1 = not watched\n- 1 = watched"
                  }
                },
                "required": [
                  "watched"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/characters": {
      "get": {
        "tags": [
          "characters"
        ],
        "operationId": "getCharacters",
        "summary": "Characters list.",
        "description": "This endpoint will retrieve the characters.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/characters/{characterID}": {
      "get": {
        "tags": [
          "characters"
        ],
        "operationId": "getCharactersDetails",
        "summary": "Get character details.",
        "description": "This endpoint will retrieve the details of a specific character.",
        "parameters": [
          {
            "in": "path",
            "name": "characterID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the character."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/genres": {
      "get": {
        "tags": [
          "genres"
        ],
        "operationId": "getGenres",
        "summary": "Genres list.",
        "description": "This endpoint will retrieve the genres.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/genres/{genreID}": {
      "get": {
        "tags": [
          "genres"
        ],
        "operationId": "getGenreDetails",
        "summary": "Get genre details.",
        "description": "This endpoint will retrieve the details of a specific genre.",
        "parameters": [
          {
            "in": "path",
            "name": "genreID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the genre."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/forum-threads/{threadID}": {
      "get": {
        "security": [
          {
          },
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "forum-threads"
        ],
        "operationId": "getForumThreadsDetails",
        "summary": "(optional authentication) Get thread details.",
        "description": "This endpoint will retrieve the details for a forum thread.",
        "parameters": [
          {
            "in": "path",
            "name": "threadID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the forum thread."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/forum-threads/{threadID}/vote": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "forum-threads"
        ],
        "operationId": "postForumThreadsVote",
        "summary": "Leaves a vote for a thread.",
        "description": "This endpoint will leave a vote for a thread.",
        "parameters": [
          {
            "in": "path",
            "name": "threadID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the forum thread."
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "vote": {
                    "type": "integer",
                    "description": "The vote to submit.\n- -1 = downvote\n- 0 = novote\n- 1 = upvote",
                    "minimum": -1,
                    "maximum": 1
                  }
                },
                "required": [
                  "vote"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/forum-threads/{threadID}/replies": {
      "get": {
        "security": [
          {
          },
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "forum-threads"
        ],
        "operationId": "getForumThreadsReplies",
        "summary": "(optional authentication) Gets the replies on a thread.",
        "description": "This endpoint will retrieve the replies on a thread.",
        "parameters": [
          {
            "in": "path",
            "name": "threadID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the forum thread."
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "example": "top"
            },
            "required": false,
            "description": "The method of ordering the results."
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "string",
              "example": "1"
            },
            "required": false,
            "description": "The page to retrieve threads from. (starts at 1)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      },
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "forum-threads"
        ],
        "operationId": "postForumThreadsReplies",
        "summary": "Leaves a reply on a thread.",
        "description": "This endpoint will leave a reply on a thread.",
        "parameters": [
          {
            "in": "path",
            "name": "threadID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the forum thread."
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The content of the reply."
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/forum-threads/search": {
      "get": {
        "security": [
          {
          },
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "forum-threads"
        ],
        "operationId": "getForumThreadsSearch",
        "summary": "(optional authentication) Searches forum threads.",
        "description": "This endpoint will retrieve the search results for forum threads.\n<h3><strong>TIP: You can prefix your search with \"id:\" to search for Anime with a specific ID.</strong></h3>",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The search query."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/forum-threads/{threadID}/lock": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "forum-threads"
        ],
        "operationId": "postForumThreadsLock",
        "summary": "[MOD+] Lock or unlock a thread.",
        "description": "<h3><strong>MOD+</strong></h3> This endpoint will lock or unlock a thread.",
        "parameters": [
          {
            "in": "path",
            "name": "threadID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the forum thread."
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "lock": {
                    "type": "integer",
                    "description": "Lock or unlock.\n- 0 = unlock\n- 1 = lock",
                    "minimum": 0,
                    "maximum": 1
                  }
                },
                "required": [
                  "lock"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/forum-replies/{replyID}/vote": {
      "post": {
        "security": [
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "forum-replies"
        ],
        "operationId": "postForumRepliesVote",
        "summary": "Leaves a vote for a forum reply.",
        "description": "This endpoint will leave a vote for a forum reply.",
        "parameters": [
          {
            "in": "path",
            "name": "replyID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the forum reply."
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "vote": {
                    "type": "integer",
                    "description": "The vote to submit.\n- 0 = downvote\n- 1 = upvote",
                    "minimum": 0,
                    "maximum": 1
                  }
                },
                "required": [
                  "vote"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/studios": {
      "get": {
        "tags": [
          "studios"
        ],
        "operationId": "getStudios",
        "summary": "Studios list.",
        "description": "This endpoint will retrieve the studios.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/studios/{studioID}": {
      "get": {
        "security": [
          {
          },
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "studios"
        ],
        "operationId": "getStudiosDetails",
        "summary": "(Optional authentication) Get studio details.",
        "description": "This endpoint will retrieve the details of a specific studio.",
        "parameters": [
          {
            "in": "path",
            "name": "studioID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the studio."
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "required": false,
            "description": "The relations to include in the response. Available relations are: anime"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/studios/{studioID}/anime": {
      "get": {
        "security": [
          {
          },
          {
            "kurozoraBearer": [
            ]
          }
        ],
        "tags": [
          "studios"
        ],
        "operationId": "getStudiosAnime",
        "summary": "(Optional authentication) Get studio anime details.",
        "description": "This endpoint will retrieve the anime details for a studio.",
        "parameters": [
          {
            "in": "path",
            "name": "studioID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the studio."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JSONSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/themes": {
      "get": {
        "tags": [
          "themes"
        ],
        "operationId": "getThemes",
        "summary": "Retrieve an overview of themes.",
        "description": "This endpoint will retrieve an overview of themes.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ThemesSuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    },
    "/privacy-policy": {
      "get": {
        "tags": [
          "misc"
        ],
        "operationId": "getPrivacyPolicy",
        "summary": "Retrieve latest privacy policy.",
        "description": "This endpoint will retrieve the latest privacy policy.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivacyPolicySuccess"
          },
          "400": {
            "$ref": "#/components/responses/JSONError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EpisodeWatchStatus": {
        "type": "integer",
        "enum": [
          -1,
          1
        ],
        "description": "The set of available watch status types.\n- -1 = not watched\n- 1 = watched"
      },
      "KurozoraLibraryStatus": {
        "type": "string",
        "enum": [
          "Watching",
          "Dropped",
          "Planning",
          "Completed",
          "OnHold"
        ],
        "description": "The set of available library status types."
      },
      "MALImportBehavior": {
        "type": "string",
        "enum": [
          "overwrite"
        ],
        "default": "overwrite",
        "description": "The set of available MAL import behavior types."
      }
    },
    "securitySchemes": {
      "kurozoraBearer": {
        "type": "apiKey",
        "in": "header",
        "name": "kuro-auth"
      }
    },
    "responses": {
      "JSONSuccess": {
        "description": "Successful Kurozora JSON response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "meta": {
                  "version": "1.0.8",
                  "query_count": 0,
                  "is_user_authenticated": false,
                  "authenticated_user_id": null
                }
              }
            }
          }
        }
      },
      "JSONError": {
        "description": "Error Kurozora JSON response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "meta": {
                  "version": "1.0.8",
                  "query_count": 0,
                  "is_user_authenticated": false,
                  "authenticated_user_id": null
                },
                "message": "Description of the error."
              }
            }
          }
        }
      },
      "ThemesSuccess": {
        "description": "Successful Themes JSON response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "themes": [
                  {
                    "id": 1,
                    "type": "themes",
                    "attributes": {
                      "name": "Watermelon",
                      "download_link": "/api/v1/themes/1/download"
                    }
                  },
                  {
                    "id": 2,
                    "type": "themes",
                    "attributes": {
                      "name": "Blueberry",
                      "download_link": "/api/v1/themes/2/download"
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "PrivacyPolicySuccess": {
        "description": "Successful Privacy Policy JSON response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "privacy_policy": ""
                }
              }
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "View KurozoraKit Documentation",
    "url": "https://developer.kurozora.app/kurozorakit/"
  }
}
