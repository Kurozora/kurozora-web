<?php

namespace App\Http\Controllers\Auth;

use App\Helpers\AppleAuthKeys;
use App\Helpers\JSONResult;
use App\Helpers\KuroAuthToken;
use App\Http\Controllers\Controller;
use App\Http\Requests\SignInWithAppleRequest;
use App\Http\Resources\UserResource;
use App\User;
use Exception;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Str;
use Laravel\Nova\Exceptions\AuthenticationException;
use musa11971\JWTDecoder\JWTDecoder;
use musa11971\JWTDecoder\JWTPayload;
use Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException;

class SignInWithAppleController extends Controller
{
    /**
     * Sign in with Apple.
     *
     * @param SignInWithAppleRequest $request
     * @return JsonResponse
     * @throws AuthenticationException
     * @throws ServiceUnavailableHttpException
     */
    public function signIn(SignInWithAppleRequest $request): JsonResponse
    {
        $data = $request->validated();

        // Get Apple's public keys
        $keys = AppleAuthKeys::get();

        // If there are no keys, show an error
        if(!count($keys))
            throw new ServiceUnavailableHttpException('Sorry, "Sign in with Apple" is not available at this moment due to an issue with Apple.');

        // Attempt to decode the JWT
        $payload = null;

        try {
            $payload = JWTDecoder::token($data['token'])
                ->withKeys($keys)
                ->ignoreExpiry()
                ->decode();
        } catch(Exception $e) {
            throw new AuthenticationException('The request wasnâ€™t accepted due to an issue with the credentials.');
        }

        // Validate the token is from correct issuer and generated by Kurozora
        if(!$this->validated($payload))
            throw new AuthenticationException('The request wasnâ€™t accepted due to an issue with the credentials.');

        // Get user or create new one
        $user = $this->getUser($payload);

        // Create a session for the user
        $session = $user->createSession([
            'platform'          => $data['platform'],
            'platform_version'  => $data['platform_version'],
            'device_vendor'     => $data['device_vendor'],
            'device_model'      => $data['device_model'],
        ]);

        // Prepare response
        $shouldSetupAccount = $user->username == null;
        $response = [
            'authenticationToken'   => KuroAuthToken::generate($user->id, $session->secret),
            'action'                => $shouldSetupAccount ? 'setupAccount' : 'signIn'
        ];

        if(!$shouldSetupAccount)
            $response = array_merge($response, [
                'data'              => [
                    UserResource::make($user)->includingSession($session)
                ]
            ]);

        // Return sign in response
        return JSONResult::success($response);
    }

    /**
     * Confirms the validity of the given payload.
     *
     * @param JWTPayload $payload
     * @return bool
     */
    protected function validated(JWTPayload $payload): bool
    {
        try {
            if ($payload->get("iss") != "https://appleid.apple.com")
                return false;

            if ($payload->get("aud") != "app.kurozora.tracker")
                return false;
        } catch(Exception $exception) {
            return false;
        }

        return true;
    }

    /**
     * Find user account if it exists.
     *
     * @param JWTPayload $payload
     * @return User|null
     */
    protected function getUser(JWTPayload $payload): ?User
    {
        $user = null;
        try {
            $email = $payload->get('email');
            $user = User::where('email', $email)->first();
        } catch(Exception $exception) {
            try {
                $subject = $payload->get('sub');
                $user = User::where('siwa_id', $subject)->first();
            } catch (Exception $exception) {
                return null;
            }
        }

        if (!$user) {
            $user = $this->signUpUser($payload);
        }

        return $user;
    }

    /**
     * Creates a new user from the given payload.
     *
     * @param JWTPayload $payload
     * @return User|null
     */
    protected function signUpUser(JWTPayload $payload): ?User
    {
        return User::create(
            [
                'email'                     => $payload->get('email'),
                'siwa_id'                   => $payload->get('sub'),
                'password'                  => User::hashPass(Str::random(30)),
                'username_change_available' => true,
            ]
        );
    }
}
