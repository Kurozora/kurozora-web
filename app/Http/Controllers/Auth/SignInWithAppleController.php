<?php

namespace App\Http\Controllers\Auth;

use App\Helpers\AppleAuthKeys;
use App\Helpers\JSONResult;
use App\Http\Controllers\Controller;
use App\Http\Requests\SignInWithAppleRequest;
use App\Http\Requests\SignInWithAppleUpdateRequest;
use App\Http\Resources\UserResource;
use App\Models\PersonalAccessToken;
use App\Models\User;
use Exception;
use Hash;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Str;
use Laravel\Nova\Exceptions\AuthenticationException;
use musa11971\JWTDecoder\Exceptions\ValueNotFoundException;
use musa11971\JWTDecoder\JWTDecoder;
use musa11971\JWTDecoder\JWTPayload;
use Random\RandomException;
use Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException;

class SignInWithAppleController extends Controller
{
    /**
     * Sign in with Apple.
     *
     * @param SignInWithAppleRequest $request
     *
     * @return JsonResponse
     * @throws AuthenticationException
     * @throws ValueNotFoundException
     * @throws RandomException
     */
    public function signIn(SignInWithAppleRequest $request): JsonResponse
    {
        $data = $request->validated();

        // Get Apple's public keys
        $keys = AppleAuthKeys::get();

        // If there are no keys, show an error
        if (!count($keys)) {
            throw new ServiceUnavailableHttpException('Sorry, "Sign in with Apple" is not available at this moment due to an issue with Apple.');
        }

        // Attempt to decode the JWT
        try {
            $payload = JWTDecoder::token($data['token'])
                ->withKeys($keys)
                ->ignoreExpiry()
                ->decode();
        } catch (Exception $e) {
            throw new AuthenticationException('The request wasn’t accepted due to an issue with the credentials.');
        }

        // Validate the token is from correct issuer and generated by Kurozora
        if (!$this->validated($payload)) {
            throw new AuthenticationException('The request wasn’t accepted due to an issue with the credentials.');
        }

        // Get user or create new one
        $user = $this->getUser($payload);

        // Create new token
        $newToken = $user->createToken($user->username . '’s ' . $data['device_model']);
        /** @var PersonalAccessToken $personalAccessToken */
        $personalAccessToken = $newToken->accessToken;

        // Create a new session attribute
        $user->createSessionAttributes($personalAccessToken, [
            'platform' => $data['platform'],
            'platform_version' => $data['platform_version'],
            'device_vendor' => $data['device_vendor'],
            'device_model' => $data['device_model'],
        ], true);

        // Prepare response
        $shouldSetupAccount = $user->wasRecentlyCreated;
        $response = [
            'authenticationToken' => $newToken->plainTextToken,
            'action' => $shouldSetupAccount ? 'setupAccount' : 'signIn'
        ];

        if (!$shouldSetupAccount) {
            $response = array_merge($response, [
                'data' => [
                    UserResource::make($user)->includingAccessToken($personalAccessToken)
                ]
            ]);
        }

        // Return sign in response
        return JSONResult::success($response);
    }

    /**
     * Update Sign in with Apple preferences.
     *
     * @param SignInWithAppleUpdateRequest $request
     *
     * @return JsonResponse
     * @throws AuthenticationException
     * @throws ValueNotFoundException
     * @throws RandomException
     */
    public function update(SignInWithAppleUpdateRequest $request): JsonResponse
    {
        $data = $request->validated();

        // Get Apple's public keys
        $keys = AppleAuthKeys::get();

        // If there are no keys, show an error
        if (!count($keys)) {
            throw new ServiceUnavailableHttpException('Sorry, "Sign in with Apple" is not available at this moment due to an issue with Apple.');
        }

        // Attempt to decode the JWT
        try {
            $payload = JWTDecoder::token($data['payload'])
                ->withKeys($keys)
                ->decode();
        } catch (Exception $e) {
            throw new AuthenticationException('The request wasn’t accepted due to an issue with the credentials.');
        }

        // Validate the token is from correct issuer and generated by Kurozora
        if (!$this->validated($payload)) {
            throw new AuthenticationException('The request wasn’t accepted due to an issue with the credentials.');
        }

        // Decode the events key
        $events = json_decode($payload->get('events'), true);

        // Update the user's SiwA preferences
        switch ($events['type']) {
            case 'email-enabled':
                $user = $this->getUser($payload, $events['sub']);
                $user->update([
                    'email_suspended' => false
                ]);
                break;
            case 'email-disabled':
                $user = $this->getUser($payload, $events['sub']);
                $user->update([
                    'email_suspended' => true
                ]);
                break;
            case 'consent-revoked':
                $user = $this->getUser($payload, $events['sub']);
                $user->delete();
                break;
        }

        // Return sign in response
        return JSONResult::success();
    }

    /**
     * Confirms the validity of the given payload.
     *
     * @param JWTPayload $payload
     *
     * @return bool
     */
    protected function validated(JWTPayload $payload): bool
    {
        try {
            if ($payload->get("iss") != "https://appleid.apple.com")
                return false;

            if ($payload->get("aud") != config('app.ios.bundle_id'))
                return false;
        } catch (Exception $exception) {
            return false;
        }

        return true;
    }

    /**
     * Find user account if it exists.
     *
     * @param JWTPayload  $payload
     * @param string|null $siwaID
     *
     * @return User|null
     * @throws ValueNotFoundException
     * @throws RandomException
     */
    protected function getUser(JWTPayload $payload, ?string $siwaID = null): ?User
    {
        if (!empty($siwaID)) {
            $user = User::where('siwa_id', $siwaID)
                ->with([
                    'badges' => function ($query) {
                        $query->with(['media']);
                    },
                    'media',
                    'tokens' => function ($query) {
                        $query->orderBy('last_used_at', 'desc')
                            ->limit(1);
                    },
                    'sessions' => function ($query) {
                        $query->orderBy('last_activity', 'desc')
                            ->limit(1);
                    },
                ])
                ->withCount(['followers', 'followedModels as following_count', 'mediaRatings'])
                ->first();
        } else {
            try {
                $email = $payload->get('email');
                $user = User::where('email', $email)
                    ->with([
                        'badges' => function ($query) {
                            $query->with(['media']);
                        },
                        'media',
                        'tokens' => function ($query) {
                            $query->orderBy('last_used_at', 'desc')
                                ->limit(1);
                        },
                        'sessions' => function ($query) {
                            $query->orderBy('last_activity', 'desc')
                                ->limit(1);
                        },
                    ])
                    ->withCount(['followers', 'followedModels as following_count', 'mediaRatings'])
                    ->first();
            } catch (Exception $exception) {
                try {
                    $subject = $payload->get('sub');
                    $user = User::where('siwa_id', $subject)
                        ->with([
                            'badges' => function ($query) {
                                $query->with(['media']);
                            },
                            'media',
                            'tokens' => function ($query) {
                                $query->orderBy('last_used_at', 'desc')
                                    ->limit(1);
                            },
                            'sessions' => function ($query) {
                                $query->orderBy('last_activity', 'desc')
                                    ->limit(1);
                            },
                        ])
                        ->withCount(['followers', 'followedModels as following_count', 'mediaRatings'])
                        ->first();
                } catch (Exception $exception) {
                    return null;
                }
            }
        }

        if (empty($user)) {
            $user = $this->signUpUser($payload)
                ->setRelation('badges', collect())
                ->setRelation('tokens', collect())
                ->setRelation('sessions', collect())
                ->setAttribute('followers_count', 0)
                ->setAttribute('following_count', 0);
        }

        return $user;
    }

    /**
     * Creates a new user from the given payload.
     *
     * @param JWTPayload $payload
     *
     * @return User|null
     * @throws ValueNotFoundException
     * @throws RandomException
     */
    protected function signUpUser(JWTPayload $payload): ?User
    {
        return User::create([
            'username' => bin2hex(random_bytes(20)),
            'email' => $payload->get('email'),
            'siwa_id' => $payload->get('sub'),
            'email_verified_at' => now(),
            'password' => Hash::make(Str::random(30)),
            'can_change_username' => true,
            'tv_rating' => 4
        ]);
    }
}
